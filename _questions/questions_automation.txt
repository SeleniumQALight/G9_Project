
1. Яка основна структура проекту? кі основні папки та файли?
    Відповідь:
        - папка src - в ній знаходяться всі файли проекту
        - папка test - в ній знаходяться файли з тестами та сьютами тестів
        - папка main/pages - в ній знаходяться файли з реалізацією сторінок
        - папка main/pages/components (elements) - в ній знаходяться файли з реалізацією компонентів (елементів) сторінок
        - папка main/libs - в ній знаходяться файли з реалізацією бібліотек (допоміжні класи)
        - папка main/resources - в ній знаходяться файли з ресурсами (зображення, текстові файли, тощо)
        - папка main/resources/properties - в ній знаходяться файли з властивостями (properties)
        - pom.xml - файл з описом проекту та залежностями

2. Що таке PageObject ?
    Відповідь:
        - патерн проектування, який дозволяє розділити логіку тестування та логіку реалізації сторінок
        - відповідно до цього патерну в проекті реалізовані класи сторінок (PageObject) та класи компонентів (елементів) сторінок (ComponentObject)
        - класи сторінок (PageObject) містять логіку тестування сторінок (наприклад, елементи та методи для введення даних в поля, натискання на кнопки, тощо)
    Навіщо це:
        - для того, щоб розділити логіку тестування та логіку реалізації сторінок
        - для того, щоб зробити код тестів більш зрозумілим та зменшити його об'єм
        - якщо нам щось потрібно зробити з елементом, то шукаємо його у відповідній сторінці та викликаємо метод, який реалізований у цьому класі.
            Якщо ж не знайшли то не бігаємо по іншим классам  ,а створюємо новий

3. Що таке PageFactory ?
    Відповідь:
        - це фабрика, яка дозволяє ініціалізувати елементи сторінки (PageObject)
        - відповідно до цього патерну в проекті реалізовані класи сторінок (PageObject) , а елементи описані в @FindBy і ініціалізуються в конструкторі

4. Що таке PageFactory.initElements(driver, this) ?
    Відповідь:
        - це ініціалізація елементів сторінки (PageObject)
        - відповідно до цього патерну в проекті реалізовані класи сторінок (PageObject) , а елементи описані в @FindBy і ініціалізуються в конструкторі

5. Що таке @FindBy ?
    Відповідь:
        - це анотація, яка дозволяє описати елемент сторінки (PageObject)

6. Що таке @Before та @After ?
    Відповідь:
        - це анотації, які дозволяють виконати певний код до тесту та після тесту відповідно

7. Що таке @BeforeClass та @AfterClass ?
    Відповідь:
        - це анотації, які дозволяють виконати певний код до всіх тестів та після всіх тестів описаних в одному классі відповідно

8. Що таке @Test ?
    Відповідь:
        - це анотація, яка дозволяє описати тест

9. Що таке jUnit ?
    Відповідь:
        - це фреймворк, який дозволяє описати та запустити тести (Анотаціі @Test, @Before, @After, @BeforeClass, @AfterClass, @ignore, тощо)
        - робити Assert тобто перевірку результатів тестів

10. Що таке Assert ?
    Відповідь:
        - це методи, які дозволяють перевірити результати тестів (Assert.assertEquals, Assert.assertTrue, тощо)
        - якщо перевірка пройшла успішно, то тест пройшов успішно
        - якщо перевірка не пройшла, то тест не пройшов успішно - тест валиться з помилкою (AssertionError)

11. Що таке SoftAssert ?
    Відповідь:
        - це методи, які дозволяють перевірити результати тестів (SoftAssert.assertEquals, SoftAssert.assertTrue, тощо) НАКОПИЧУЮТЬ ПОМИЛКИ
        - якщо перевірка пройшла успішно, то тест пройшов успішно
        - якщо перевірка не пройшла (хоча б одна), то тест не пройшов успішно - тест валиться з помилкою (AssertionError), і виводить одразу ВСІ помилки
        - ми використали бібліотеку org.assertj.core.api.SoftAssertions;, яка має методи SoftAssert

12.Що таке webDriver ?
    Відповідь:
        - це інтерфейс, який дозволяє взаємодіяти з браузером
        - в ньому описані методи для взаємодії з браузером (відкриття браузера, закриття браузера, відкриття сторінки, тощо)
        - в ньому описаці методи для взаємодії з елементами сторінки (введення даних в поля, натискання на кнопки, тощо)
        - в проекті використовується реалізація цього інтерфейсу - наприклад ChromeDriver

13. Що таке webDriverManager ?
    Відповідь:
        - це бібліотека, яка дозволяє автоматично завантажувати драйвери для браузерів (Chrome, Firefox, тощо)

14. Що таке webDriverWait ?
    Відповідь:
        - явне очікування
        - це клас, який дозволяє чекати певний час на певний стан або подію
        - в проекті використовується для того, щоб чекати поки сторінка завантажиться, поки елемент стане видимим, тощо

15. Що таке implicit wait ?
    Відповідь:
        - неявне очікування (дефолтне)
        - це налаштування, яке дозволяє чекати певний час на певну подію

15.1 Чому час в implicit wait встановлюється як умога меньшим?
    Відповідь:
        - якщо встановити час більшим, то тест буде виконуватися довше (бо дії перевірки що чогось НЕмає будуть виконуватися довше)

16. Як працює очикування в проекті ?
    Відповідь:
    - кожні 500 мілісекунд перевіряється чи можемо виконати дію (наприклад, натиснути на елемент, ввести дані в поле, тощо)
    - якщо можемо, то виконуємо дію і йдемо далі не чекаючи до кінця часу
    - якщо не можемо, то чекаємо наступні 500 мілісекунд і знову перевіряємо чи можемо виконати дію
    - якщо пройшов час, а дію виконати не можемо, то викидається помилка (ElementNotInteractableException, тощо)

17. webDriver.quit() vs webDriver.close() ?
    Відповідь:
        - webDriver.quit() - закриває всі вікна браузера і сам драйвер
        - webDriver.close() - закриває поточне вікно браузера

18. Параметризований локатор - що це?
        Відповідь:
        - це локатор, який містить параметри (наприклад, локатор елемента, який містить текст)
        - ми його не можемо описати в FindBy анотації, тому що в ній локатор повинен бути статичним
        - тому використовуємо метод String.format, який дозволяє підставити параметри в локатор а далі webdriver.findElement(By.xpath(...)) знайде елемент

19. Що таке webdriver.findelements ?
        Відповідь:
        - це метод, який знаходить всі елементи за локатором
        - якщо елементів не знайдено, то повертається пустий список
        - якщо елементи знайдено, то повертається список з елементами

20. Як виконати javascript код в тесті?
        Відповідь:
        - використовуємо метод executeScript webDriver.executeScript("javascript code")

21. Що таке класс Actions?
        Відповідь:
        - це клас, який дозволяє виконувати дії з мишкою (натискання, перетягування, тощо)
        - використовуємо його для того, щоб виконати дії з мишкою, які не можна виконати звичайними методами webDriver (наприклад, натиснути на елемент двічи, перетягнути елемент, тощо)
        - з клавіатурою також можна виконувати дії (натискання клавіш, комбінацій клавіш тощо)